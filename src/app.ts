#! /usr/bin/env node

import { exec } from 'child_process';
import { readdir, writeFile, stat } from 'node:fs/promises';
import { exit } from 'process';
import DEFAULT_OUTPUT_PATH_DIR from './constants/DEFAULT_OUTPUT_PATH_DIR';
import askForFileName from './functions/askForFileName';
import checkForDuplicateName from './functions/checkForDuplicateName';
import generateFileName from './functions/generateFileName';
import generateTxtData from './functions/generateTxtData';
import askForOutputDir from './functions/askForWriteDir';

const main = async () => {
  console.log(`Welcome to txt_helper! `);
  let userIsSettingFileName = true;
  let userIsSettingOutputDir = true;

  let fileName = '';
  let outputDir = '';
  let isFileNameAutoGenerated = false;

  let filesOnOutputDir = [];

  while (userIsSettingOutputDir) {
    const tempOutputDir = await askForOutputDir();

    if (tempOutputDir === '') {
      outputDir = DEFAULT_OUTPUT_PATH_DIR;
    } else {
      outputDir = tempOutputDir;
    }
    let isValidDirectory = false;

    try {
      isValidDirectory = (await stat(outputDir)).isDirectory();

      console.log('isValidDirectory', isValidDirectory);
    } catch (err) {
      console.log(
        'This is not a valid directory! Please choose a valid one...'
      );
    }

    if (isValidDirectory) {
      userIsSettingOutputDir = false;
    }
  }

  filesOnOutputDir = await readdir(outputDir);
  const txtFilesOnOutputDir = filesOnOutputDir.filter((fileName: string) => {
    return fileName.endsWith('.txt');
  });

  while (userIsSettingFileName) {
    const tempFileName = await askForFileName();

    if (tempFileName === '') {
      fileName = generateFileName();
      isFileNameAutoGenerated = true;
      userIsSettingFileName = false;

      break;
    } else if (!!tempFileName) {
      const hasDuplicateName = await checkForDuplicateName(
        txtFilesOnOutputDir,
        tempFileName
      );

      if (hasDuplicateName) {
        console.log('This file already exists! Please choose another name...');
      } else {
        fileName = tempFileName;
        userIsSettingFileName = false;

        break;
      }
    }
  }

  const filePath = `${outputDir}/${fileName}.txt`;

  let txtData = generateTxtData(isFileNameAutoGenerated, fileName);

  await writeFile(filePath, txtData);

  console.log(
    `${fileName}.txt created successfully on ${filePath}! Opening it...`
  );

  const cmd = `open ${filePath}`;

  exec(cmd, (error, stdout, stderr) => {
    if (error) {
      console.error(`exec error: ${error}`);
      return;
    }
    console.log(`stdout: ${stdout}`);
    console.error(`stderr: ${stderr}`);
  });

  exit();
};

main();
